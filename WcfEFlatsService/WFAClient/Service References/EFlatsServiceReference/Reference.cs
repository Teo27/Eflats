//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFAClient.EFlatsServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MdlStudent", Namespace="http://schemas.datacontract.org/2004/07/ServerModel")]
    [System.SerializableAttribute()]
    public partial class MdlStudent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ConfirmationCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StudentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Number_of_childrenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Number_of_cohabitersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DisabledField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime Date_of_creationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string ConfirmationCode {
            get {
                return this.ConfirmationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConfirmationCodeField, value) != true)) {
                    this.ConfirmationCodeField = value;
                    this.RaisePropertyChanged("ConfirmationCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public bool Confirmed {
            get {
                return this.ConfirmedField;
            }
            set {
                if ((this.ConfirmedField.Equals(value) != true)) {
                    this.ConfirmedField = value;
                    this.RaisePropertyChanged("Confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public bool Student {
            get {
                return this.StudentField;
            }
            set {
                if ((this.StudentField.Equals(value) != true)) {
                    this.StudentField = value;
                    this.RaisePropertyChanged("Student");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public int Score {
            get {
                return this.ScoreField;
            }
            set {
                if ((this.ScoreField.Equals(value) != true)) {
                    this.ScoreField = value;
                    this.RaisePropertyChanged("Score");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public int Number_of_children {
            get {
                return this.Number_of_childrenField;
            }
            set {
                if ((this.Number_of_childrenField.Equals(value) != true)) {
                    this.Number_of_childrenField = value;
                    this.RaisePropertyChanged("Number_of_children");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public bool Pet {
            get {
                return this.PetField;
            }
            set {
                if ((this.PetField.Equals(value) != true)) {
                    this.PetField = value;
                    this.RaisePropertyChanged("Pet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public int Number_of_cohabiters {
            get {
                return this.Number_of_cohabitersField;
            }
            set {
                if ((this.Number_of_cohabitersField.Equals(value) != true)) {
                    this.Number_of_cohabitersField = value;
                    this.RaisePropertyChanged("Number_of_cohabiters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public bool Disabled {
            get {
                return this.DisabledField;
            }
            set {
                if ((this.DisabledField.Equals(value) != true)) {
                    this.DisabledField = value;
                    this.RaisePropertyChanged("Disabled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public System.DateTime Date_of_creation {
            get {
                return this.Date_of_creationField;
            }
            set {
                if ((this.Date_of_creationField.Equals(value) != true)) {
                    this.Date_of_creationField = value;
                    this.RaisePropertyChanged("Date_of_creation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=14)]
        public string PostCode {
            get {
                return this.PostCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostCodeField, value) != true)) {
                    this.PostCodeField = value;
                    this.RaisePropertyChanged("PostCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=15)]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=16)]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=17)]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MdlLandlord", Namespace="http://schemas.datacontract.org/2004/07/ServerModel")]
    [System.SerializableAttribute()]
    public partial class MdlLandlord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ConfirmedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime Date_of_creationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PostCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Contact_personField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public bool Confirmed {
            get {
                return this.ConfirmedField;
            }
            set {
                if ((this.ConfirmedField.Equals(value) != true)) {
                    this.ConfirmedField = value;
                    this.RaisePropertyChanged("Confirmed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.DateTime Date_of_creation {
            get {
                return this.Date_of_creationField;
            }
            set {
                if ((this.Date_of_creationField.Equals(value) != true)) {
                    this.Date_of_creationField = value;
                    this.RaisePropertyChanged("Date_of_creation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string PostCode {
            get {
                return this.PostCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PostCodeField, value) != true)) {
                    this.PostCodeField = value;
                    this.RaisePropertyChanged("PostCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public string Contact_person {
            get {
                return this.Contact_personField;
            }
            set {
                if ((object.ReferenceEquals(this.Contact_personField, value) != true)) {
                    this.Contact_personField = value;
                    this.RaisePropertyChanged("Contact_person");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EFlatsServiceReference.IWcfEFlatsService")]
    public interface IWcfEFlatsService {
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/MessageTestSecured", ReplyAction="http://tempuri.org/IWcfEFlatsService/MessageTestSecuredResponse")]
        string MessageTestSecured();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/MessageTestSecured", ReplyAction="http://tempuri.org/IWcfEFlatsService/MessageTestSecuredResponse")]
        System.Threading.Tasks.Task<string> MessageTestSecuredAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/MessageTest", ReplyAction="http://tempuri.org/IWcfEFlatsService/MessageTestResponse")]
        string MessageTest();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/MessageTest", ReplyAction="http://tempuri.org/IWcfEFlatsService/MessageTestResponse")]
        System.Threading.Tasks.Task<string> MessageTestAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddStudent", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddStudentResponse")]
        string AddStudent(WFAClient.EFlatsServiceReference.MdlStudent mdlStudentObj);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddStudent", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddStudentResponse")]
        System.Threading.Tasks.Task<string> AddStudentAsync(WFAClient.EFlatsServiceReference.MdlStudent mdlStudentObj);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddLandlord", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddLandlordResponse")]
        string AddLandlord(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandtlordObj);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddLandlord", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddLandlordResponse")]
        System.Threading.Tasks.Task<string> AddLandlordAsync(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandtlordObj);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/Login", ReplyAction="http://tempuri.org/IWcfEFlatsService/LoginResponse")]
        string Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/Login", ReplyAction="http://tempuri.org/IWcfEFlatsService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/Validate", ReplyAction="http://tempuri.org/IWcfEFlatsService/ValidateResponse")]
        bool Validate(string code);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/Validate", ReplyAction="http://tempuri.org/IWcfEFlatsService/ValidateResponse")]
        System.Threading.Tasks.Task<bool> ValidateAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddFlat", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddFlatResponse")]
        string AddFlat(string landLordEmail, string type, string address, string postCode, string city, double rent, double deposit, string availableFrom, string description);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddFlat", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddFlatResponse")]
        System.Threading.Tasks.Task<string> AddFlatAsync(string landLordEmail, string type, string address, string postCode, string city, double rent, double deposit, string availableFrom, string description);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddToWishlist", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddToWishlistResponse")]
        bool AddToWishlist(string studentEmail, int flatId, int score);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/AddToWishlist", ReplyAction="http://tempuri.org/IWcfEFlatsService/AddToWishlistResponse")]
        System.Threading.Tasks.Task<bool> AddToWishlistAsync(string studentEmail, int flatId, int score);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/RemoveFromWishlist", ReplyAction="http://tempuri.org/IWcfEFlatsService/RemoveFromWishlistResponse")]
        bool RemoveFromWishlist(string studentEmail, int FlatId);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/RemoveFromWishlist", ReplyAction="http://tempuri.org/IWcfEFlatsService/RemoveFromWishlistResponse")]
        System.Threading.Tasks.Task<bool> RemoveFromWishlistAsync(string studentEmail, int FlatId);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/EditStudentProfile", ReplyAction="http://tempuri.org/IWcfEFlatsService/EditStudentProfileResponse")]
        bool EditStudentProfile(string email, int numberOfChildren, bool pet, int numberOfCohabitors, bool disabled, string name, string surname, string address, string postCode, string city, string country, string phone);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/EditStudentProfile", ReplyAction="http://tempuri.org/IWcfEFlatsService/EditStudentProfileResponse")]
        System.Threading.Tasks.Task<bool> EditStudentProfileAsync(string email, int numberOfChildren, bool pet, int numberOfCohabitors, bool disabled, string name, string surname, string address, string postCode, string city, string country, string phone);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/EditLandlordProfile", ReplyAction="http://tempuri.org/IWcfEFlatsService/EditLandlordProfileResponse")]
        bool EditLandlordProfile(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandlordObj);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/EditLandlordProfile", ReplyAction="http://tempuri.org/IWcfEFlatsService/EditLandlordProfileResponse")]
        System.Threading.Tasks.Task<bool> EditLandlordProfileAsync(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandlordObj);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/GetUserType", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetUserTypeResponse")]
        string GetUserType(string email);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/GetUserType", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetUserTypeResponse")]
        System.Threading.Tasks.Task<string> GetUserTypeAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetStudentData", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetStudentDataResponse")]
        WFAClient.EFlatsServiceReference.MdlStudent GetStudentData(string email);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetStudentData", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetStudentDataResponse")]
        System.Threading.Tasks.Task<WFAClient.EFlatsServiceReference.MdlStudent> GetStudentDataAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetLandlordData", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetLandlordDataResponse")]
        WFAClient.EFlatsServiceReference.MdlLandlord GetLandlordData(string email);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetLandlordData", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetLandlordDataResponse")]
        System.Threading.Tasks.Task<WFAClient.EFlatsServiceReference.MdlLandlord> GetLandlordDataAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetAllFlats", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetAllFlatsResponse")]
        System.Data.DataSet GetAllFlats();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetAllFlats", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetAllFlatsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetAllFlatsAsync();
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetWishlist", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetWishlistResponse")]
        System.Data.DataSet GetWishlist(string studentEmail);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetWishlist", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetWishlistResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetWishlistAsync(string studentEmail);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/SearchFlats", ReplyAction="http://tempuri.org/IWcfEFlatsService/SearchFlatsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WFAClient.EFlatsServiceReference.MdlStudent))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WFAClient.EFlatsServiceReference.MdlLandlord))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Data.DataSet SearchFlats(object[] postCode, int minPrice, int maxPrice, int minDeposit, int maxDeposit);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/SearchFlats", ReplyAction="http://tempuri.org/IWcfEFlatsService/SearchFlatsResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SearchFlatsAsync(object[] postCode, int minPrice, int maxPrice, int minDeposit, int maxDeposit);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetFlatsLandlord", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetFlatsLandlordResponse")]
        System.Data.DataSet GetFlatsLandlord(string landlordEmail);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.EncryptAndSign, Action="http://tempuri.org/IWcfEFlatsService/GetFlatsLandlord", ReplyAction="http://tempuri.org/IWcfEFlatsService/GetFlatsLandlordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> GetFlatsLandlordAsync(string landlordEmail);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/UpdateFlatStatus", ReplyAction="http://tempuri.org/IWcfEFlatsService/UpdateFlatStatusResponse")]
        bool UpdateFlatStatus(int fId, string status, System.DateTime dateOfOffer, string availableFrom);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/UpdateFlatStatus", ReplyAction="http://tempuri.org/IWcfEFlatsService/UpdateFlatStatusResponse")]
        System.Threading.Tasks.Task<bool> UpdateFlatStatusAsync(int fId, string status, System.DateTime dateOfOffer, string availableFrom);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/UpdateFlat", ReplyAction="http://tempuri.org/IWcfEFlatsService/UpdateFlatResponse")]
        bool UpdateFlat(int flatId, double rent, double deposit, string description);
        
        [System.ServiceModel.OperationContractAttribute(ProtectionLevel=System.Net.Security.ProtectionLevel.None, Action="http://tempuri.org/IWcfEFlatsService/UpdateFlat", ReplyAction="http://tempuri.org/IWcfEFlatsService/UpdateFlatResponse")]
        System.Threading.Tasks.Task<bool> UpdateFlatAsync(int flatId, double rent, double deposit, string description);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfEFlatsServiceChannel : WFAClient.EFlatsServiceReference.IWcfEFlatsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfEFlatsServiceClient : System.ServiceModel.ClientBase<WFAClient.EFlatsServiceReference.IWcfEFlatsService>, WFAClient.EFlatsServiceReference.IWcfEFlatsService {
        
        public WcfEFlatsServiceClient() {
        }
        
        public WcfEFlatsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfEFlatsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfEFlatsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfEFlatsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string MessageTestSecured() {
            return base.Channel.MessageTestSecured();
        }
        
        public System.Threading.Tasks.Task<string> MessageTestSecuredAsync() {
            return base.Channel.MessageTestSecuredAsync();
        }
        
        public string MessageTest() {
            return base.Channel.MessageTest();
        }
        
        public System.Threading.Tasks.Task<string> MessageTestAsync() {
            return base.Channel.MessageTestAsync();
        }
        
        public string AddStudent(WFAClient.EFlatsServiceReference.MdlStudent mdlStudentObj) {
            return base.Channel.AddStudent(mdlStudentObj);
        }
        
        public System.Threading.Tasks.Task<string> AddStudentAsync(WFAClient.EFlatsServiceReference.MdlStudent mdlStudentObj) {
            return base.Channel.AddStudentAsync(mdlStudentObj);
        }
        
        public string AddLandlord(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandtlordObj) {
            return base.Channel.AddLandlord(mdlLandtlordObj);
        }
        
        public System.Threading.Tasks.Task<string> AddLandlordAsync(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandtlordObj) {
            return base.Channel.AddLandlordAsync(mdlLandtlordObj);
        }
        
        public string Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public bool Validate(string code) {
            return base.Channel.Validate(code);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAsync(string code) {
            return base.Channel.ValidateAsync(code);
        }
        
        public string AddFlat(string landLordEmail, string type, string address, string postCode, string city, double rent, double deposit, string availableFrom, string description) {
            return base.Channel.AddFlat(landLordEmail, type, address, postCode, city, rent, deposit, availableFrom, description);
        }
        
        public System.Threading.Tasks.Task<string> AddFlatAsync(string landLordEmail, string type, string address, string postCode, string city, double rent, double deposit, string availableFrom, string description) {
            return base.Channel.AddFlatAsync(landLordEmail, type, address, postCode, city, rent, deposit, availableFrom, description);
        }
        
        public bool AddToWishlist(string studentEmail, int flatId, int score) {
            return base.Channel.AddToWishlist(studentEmail, flatId, score);
        }
        
        public System.Threading.Tasks.Task<bool> AddToWishlistAsync(string studentEmail, int flatId, int score) {
            return base.Channel.AddToWishlistAsync(studentEmail, flatId, score);
        }
        
        public bool RemoveFromWishlist(string studentEmail, int FlatId) {
            return base.Channel.RemoveFromWishlist(studentEmail, FlatId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveFromWishlistAsync(string studentEmail, int FlatId) {
            return base.Channel.RemoveFromWishlistAsync(studentEmail, FlatId);
        }
        
        public bool EditStudentProfile(string email, int numberOfChildren, bool pet, int numberOfCohabitors, bool disabled, string name, string surname, string address, string postCode, string city, string country, string phone) {
            return base.Channel.EditStudentProfile(email, numberOfChildren, pet, numberOfCohabitors, disabled, name, surname, address, postCode, city, country, phone);
        }
        
        public System.Threading.Tasks.Task<bool> EditStudentProfileAsync(string email, int numberOfChildren, bool pet, int numberOfCohabitors, bool disabled, string name, string surname, string address, string postCode, string city, string country, string phone) {
            return base.Channel.EditStudentProfileAsync(email, numberOfChildren, pet, numberOfCohabitors, disabled, name, surname, address, postCode, city, country, phone);
        }
        
        public bool EditLandlordProfile(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandlordObj) {
            return base.Channel.EditLandlordProfile(mdlLandlordObj);
        }
        
        public System.Threading.Tasks.Task<bool> EditLandlordProfileAsync(WFAClient.EFlatsServiceReference.MdlLandlord mdlLandlordObj) {
            return base.Channel.EditLandlordProfileAsync(mdlLandlordObj);
        }
        
        public string GetUserType(string email) {
            return base.Channel.GetUserType(email);
        }
        
        public System.Threading.Tasks.Task<string> GetUserTypeAsync(string email) {
            return base.Channel.GetUserTypeAsync(email);
        }
        
        public WFAClient.EFlatsServiceReference.MdlStudent GetStudentData(string email) {
            return base.Channel.GetStudentData(email);
        }
        
        public System.Threading.Tasks.Task<WFAClient.EFlatsServiceReference.MdlStudent> GetStudentDataAsync(string email) {
            return base.Channel.GetStudentDataAsync(email);
        }
        
        public WFAClient.EFlatsServiceReference.MdlLandlord GetLandlordData(string email) {
            return base.Channel.GetLandlordData(email);
        }
        
        public System.Threading.Tasks.Task<WFAClient.EFlatsServiceReference.MdlLandlord> GetLandlordDataAsync(string email) {
            return base.Channel.GetLandlordDataAsync(email);
        }
        
        public System.Data.DataSet GetAllFlats() {
            return base.Channel.GetAllFlats();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetAllFlatsAsync() {
            return base.Channel.GetAllFlatsAsync();
        }
        
        public System.Data.DataSet GetWishlist(string studentEmail) {
            return base.Channel.GetWishlist(studentEmail);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetWishlistAsync(string studentEmail) {
            return base.Channel.GetWishlistAsync(studentEmail);
        }
        
        public System.Data.DataSet SearchFlats(object[] postCode, int minPrice, int maxPrice, int minDeposit, int maxDeposit) {
            return base.Channel.SearchFlats(postCode, minPrice, maxPrice, minDeposit, maxDeposit);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SearchFlatsAsync(object[] postCode, int minPrice, int maxPrice, int minDeposit, int maxDeposit) {
            return base.Channel.SearchFlatsAsync(postCode, minPrice, maxPrice, minDeposit, maxDeposit);
        }
        
        public System.Data.DataSet GetFlatsLandlord(string landlordEmail) {
            return base.Channel.GetFlatsLandlord(landlordEmail);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> GetFlatsLandlordAsync(string landlordEmail) {
            return base.Channel.GetFlatsLandlordAsync(landlordEmail);
        }
        
        public bool UpdateFlatStatus(int fId, string status, System.DateTime dateOfOffer, string availableFrom) {
            return base.Channel.UpdateFlatStatus(fId, status, dateOfOffer, availableFrom);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFlatStatusAsync(int fId, string status, System.DateTime dateOfOffer, string availableFrom) {
            return base.Channel.UpdateFlatStatusAsync(fId, status, dateOfOffer, availableFrom);
        }
        
        public bool UpdateFlat(int flatId, double rent, double deposit, string description) {
            return base.Channel.UpdateFlat(flatId, rent, deposit, description);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFlatAsync(int flatId, double rent, double deposit, string description) {
            return base.Channel.UpdateFlatAsync(flatId, rent, deposit, description);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EFlatsServiceReference.IWcfEFlatsServiceAdmin")]
    public interface IWcfEFlatsServiceAdmin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminLogin", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminLoginResponse")]
        int AdminLogin(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminLogin", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminLoginResponse")]
        System.Threading.Tasks.Task<int> AdminLoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminGetTableData", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminGetTableDataResponse")]
        System.Data.DataSet AdminGetTableData(string selectedTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminGetTableData", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminGetTableDataResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> AdminGetTableDataAsync(string selectedTable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateApplications", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateApplicationsResponse")]
        bool AdminUpdateApplications(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateApplications", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateApplicationsResponse")]
        System.Threading.Tasks.Task<bool> AdminUpdateApplicationsAsync(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateFlats", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateFlatsResponse")]
        bool AdminUpdateFlats(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateFlats", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateFlatsResponse")]
        System.Threading.Tasks.Task<bool> AdminUpdateFlatsAsync(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateStudents", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateStudentsResponse")]
        bool AdminUpdateStudents(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateStudents", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateStudentsResponse")]
        System.Threading.Tasks.Task<bool> AdminUpdateStudentsAsync(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateLandlords", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateLandlordsResponse")]
        bool AdminUpdateLandlords(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateLandlords", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateLandlordsResponse")]
        System.Threading.Tasks.Task<bool> AdminUpdateLandlordsAsync(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateAdmins", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateAdminsResponse")]
        bool AdminUpdateAdmins(System.Data.DataSet ds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateAdmins", ReplyAction="http://tempuri.org/IWcfEFlatsServiceAdmin/AdminUpdateAdminsResponse")]
        System.Threading.Tasks.Task<bool> AdminUpdateAdminsAsync(System.Data.DataSet ds);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfEFlatsServiceAdminChannel : WFAClient.EFlatsServiceReference.IWcfEFlatsServiceAdmin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfEFlatsServiceAdminClient : System.ServiceModel.ClientBase<WFAClient.EFlatsServiceReference.IWcfEFlatsServiceAdmin>, WFAClient.EFlatsServiceReference.IWcfEFlatsServiceAdmin {
        
        public WcfEFlatsServiceAdminClient() {
        }
        
        public WcfEFlatsServiceAdminClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfEFlatsServiceAdminClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfEFlatsServiceAdminClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfEFlatsServiceAdminClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AdminLogin(string username, string password) {
            return base.Channel.AdminLogin(username, password);
        }
        
        public System.Threading.Tasks.Task<int> AdminLoginAsync(string username, string password) {
            return base.Channel.AdminLoginAsync(username, password);
        }
        
        public System.Data.DataSet AdminGetTableData(string selectedTable) {
            return base.Channel.AdminGetTableData(selectedTable);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> AdminGetTableDataAsync(string selectedTable) {
            return base.Channel.AdminGetTableDataAsync(selectedTable);
        }
        
        public bool AdminUpdateApplications(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateApplications(ds);
        }
        
        public System.Threading.Tasks.Task<bool> AdminUpdateApplicationsAsync(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateApplicationsAsync(ds);
        }
        
        public bool AdminUpdateFlats(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateFlats(ds);
        }
        
        public System.Threading.Tasks.Task<bool> AdminUpdateFlatsAsync(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateFlatsAsync(ds);
        }
        
        public bool AdminUpdateStudents(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateStudents(ds);
        }
        
        public System.Threading.Tasks.Task<bool> AdminUpdateStudentsAsync(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateStudentsAsync(ds);
        }
        
        public bool AdminUpdateLandlords(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateLandlords(ds);
        }
        
        public System.Threading.Tasks.Task<bool> AdminUpdateLandlordsAsync(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateLandlordsAsync(ds);
        }
        
        public bool AdminUpdateAdmins(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateAdmins(ds);
        }
        
        public System.Threading.Tasks.Task<bool> AdminUpdateAdminsAsync(System.Data.DataSet ds) {
            return base.Channel.AdminUpdateAdminsAsync(ds);
        }
    }
}
